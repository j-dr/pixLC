#!/usr/bin/env python

from astropy.cosmology import w0waCDM
import astropy.units as u
import healpy as hp
import numpy as np
import fitsio
import argparse
import sys
import os

def octvert(octn):
    
    if octn==0:
        vert = [[1,0,0], [0,1,0], [0,0,1]]
    elif octn==1:
        vert = [[-1,0,0], [0,1,0], [0,0,1]]
    elif octn==2:
        vert = [[-1,0,0], [0,-1,0], [0,0,1]]
    elif octn==3:
        vert = [[1,0,0], [0,-1,0], [0,0,1]]
    elif octn==4:
        vert = [[1,0,0], [0,1,0], [0,0,-1]]
    elif octn==5:
        vert = [[-1,0,0], [0,1,0], [0,0,-1]]
    elif octn==6:
        vert = [[-1,0,0], [0,-1,0], [0,0,-1]]
    elif octn==7:
        vert = [[1,0,0], [0,-1,0], [0,0,-1]]

    return vert


def getOctPix(nside, octants, nest=True, inclusive=True):

    for i, oc in enumerate(octants):
        vert = octvert(oc)

        if i==0:
            pix = hp.query_polygon(nside, vert, nest=nest, inclusive=inclusive)
        else:
            p   = hp.query_polygon(nside, vert, nest=nest, inclusive=inclusive)
            pix = np.hstack([pix, p])
            
    pix = np.unique(pix)

    return pix
        

def kappaPts(nside, r, octants):

    pix  = getOctPix(nside, octants)
    vec  = np.array(hp.pix2vec(nside, pix)).T
    vec  = vec * r

    return vec


def writeCalclensKappa(nside, r, octants, outpath):

    vec = kappaPts(nside, r, octants)
    ids = np.arange(len(vec))
    
    kdtype = np.dtype([("ID", np.int), ("PX", np.float), ("PY", np.float), ("PZ", np.float)])
    kappa  = np.zeros(len(vec), dtype=kdtype)
    kappa["ID"] = ids
    kappa["PX"] = vec[:,0]
    kappa["PY"] = vec[:,1]
    kappa["PZ"] = vec[:,2]

    fitsio.write(outpath, kappa)


if __name__=="__main__":
    
    parser = argparse.ArgumentParser(description='Lay down uniform points to evaluate kappa maps on')
    parser.add_argument('outbase', type=str,
                        help='Output directory')
    parser.add_argument('nside', type=int,
                        help='Nside of the points')
    parser.add_argument('omega_m', type=float)
    parser.add_argument('h', type=float)
    parser.add_argument('--octants', dest='octants', type=int, nargs='+',
                        help='List of octants to lay points in')
    parser.add_argument('--z', dest='z', type=float, nargs='+',
                        help='List of redshifts to make kappa maps at')
    parser.add_argument('--w0', dest='w0', type=float, default=-1)
    parser.add_argument('--wa', dest='wa', type=float, default=0)
    
    args  = parser.parse_args()
    print('octants: {0}'.format(args.octants))
    print('z      : {0}'.format(args.z))
    print('omega_m: {0}'.format(args.omega_m))
    print('h      : {0}'.format(args.h))

    cosmo = w0waCDM(100*args.h * u.km / u.s / u.Mpc, args.omega_m,
                    1-args.omega_m, w0=args.w0, wa=args.wa)
    
    for i, z in enumerate(args.z):
        cmr = cosmo.comoving_distance(z)
        cmr = cmr.value
        print(cmr)

        opath = "{0}/kappa_pts.{1}.fits".format(args.outbase, i)
        writeCalclensKappa(args.nside, cmr, args.octants, opath)
