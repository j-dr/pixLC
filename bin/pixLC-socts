#!/usr/bin/env python
from __future__ import print_function, division
from pixLC import readCFG, create_refinement_plan
import healpy as hp
import numpy as np
import sys
import os


def octvert(octn):
    
    if octn==0:
        vert = [[1,0,0], [0,1,0], [0,0,1]]
    elif octn==1:
        vert = [[-1,0,0], [0,1,0], [0,0,1]]
    elif octn==2:
        vert = [[-1,0,0], [0,-1,0], [0,0,1]]
    elif octn==3:
        vert = [[1,0,0], [0,-1,0], [0,0,1]]
    elif octn==4:
        vert = [[1,0,0], [0,1,0], [0,0,-1]]
    elif octn==5:
        vert = [[-1,0,0], [0,1,0], [0,0,-1]]
    elif octn==6:
        vert = [[-1,0,0], [0,-1,0], [0,0,-1]]
    elif octn==7:
        vert = [[1,0,0], [0,-1,0], [0,0,-1]]

    return vert

if __name__=="__main__":

    cfg  = sys.argv[1]
    octs = sys.argv[2:]
    octs = [int(o) for o in octs]
    cfg = readCFG(cfg)
    if 'hfilenside' in cfg.keys():
        hfnside = int(cfg['hfilenside'])
    else:
        hfnside = 4
    rbins, rr, rnside, nr = create_refinement_plan(float(cfg['rmin']), float(cfg['rmax']),
 						  25.0, float(cfg['rr0']), int(cfg['lfilenside']),
 						  hfilenside=hfnside)
    bin_offset = cfg['rmin']//25.0
    rbins = np.arange((cfg['rmax']-cfg['rmin'])//25.0, dtype=np.int64)
    
    for i, r in enumerate(rbins):
        pix = []
        for o in octs:
            vert = octvert(o)
            pix.append(hp.query_polygon(rnside[i], vert, inclusive=True, nest=True))

        pix = np.hstack(pix)
        pix = np.unique(pix)
        
        for p in pix:
            print("{0}/{1}_{2}_{3}".format(cfg['outpath'], cfg['prefix'], int(r+bin_offset), p))
