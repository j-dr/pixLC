#!/usr/bin/env python
"""
    %prog [options] nside output_file plane1_basename [plane2_basename]
    reduce pixLC output into a single HEALPix map

    nside - nside of map to make
    output_file - file for output map
    plane1_basename - /path/to/plane/up/to/last/underscore

    The output units of the map are Msun/h.

    More than one map can be combined via specifying more than 
    one basename."""

import os
import sys
import numpy as np
import matplotlib
matplotlib.use('Agg')
import healpy as hp
from pixlc import pixLC
from mpi4py import MPI
from collections import namedtuple
from optparse import OptionParser

parser = OptionParser(__doc__)
parser.add_option('--verbose',action='store_true',default=False,
                  help="print progress on making maps")

pixLCHeader = namedtuple('pixLCHeader','npart indexnside filenside rmin rmax npartrad boxsize mass omega_m omega_l h')           

if __name__ == '__main__':
    # do args
    options, args = parser.parse_args(sys.argv[1:])    
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)    
    pnside = int(args[0])
    ofname = args[1]
    basenames = args[2:]
    
    # setup map
    d = np.zeros(hp.nside2npix(pnside))

    # put parts from each lens plane into the map
    for basename in basenames:
        h,idx = pixLC.read_radial_bin(basename+'_0')
        h = pixLCHeader._make(tuple(h))
        num_files = hp.nside2npix(h.filenside)
        
        for fnum in range(num_files):            
            fname = '%s_%d' % (basename,fnum)
            if options.verbose:
                print("reading file % 4d of % 4d: '%s'" % (fnum+1,num_files,fname))
            h,idx = pixLC.read_radial_bin(fname)
            h = pixLCHeader._make(tuple(h))
            if h.npart > 0:
                _,_,pos = pixLC.read_radial_bin(fname,read_pos=True)
                pos = pos.reshape((h.npart,3))
                idx = hp.vec2pix(pnside,pos[:,0],pos[:,1],pos[:,2])
                d += np.bincount(idx,minlength=d.size)*h.mass*1.0e10

    # write the file
    if os.path.exists(ofname):
        try:
            os.remove(ofname)
        except:
            pass
    hp.write_map(ofname,d)
    
    # code to test the map
    if False:
        import matplotlib.pyplot as plt
        hp.mollview(np.arcsinh(d))
        plt.savefig('test.png')
    
    sys.exit(0)
